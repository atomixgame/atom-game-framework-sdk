apply plugin: 'java';

group = 'com.github.kelemen';
version = '1.3.0.0.1';

String gradleVersion = '1.11';
List otherGradleVersions = ['1.8', '1.9', '1.10'];

ext.scriptFile = { String fileName ->
    return new File(new File(rootDir, 'gradle'), fileName);
}

apply from: scriptFile('compiler-settings.gradle');
configureJavaCompilers(5);

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources';
    from sourceSets.main.allSource;
}

artifacts {
    archives jar
    archives sourcesJar
}

repositories {
    mavenCentral();

    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }

    maven {
        url 'http://repo.gradle.org/gradle/libs-snapshots-local'
    }
}

configurations {
    provided
}

dependencies {
    compile group: 'org.gradle', name: 'gradle-tooling-api', version: gradleVersion;
    provided group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.6';

    testCompile group: 'junit', name: 'junit', version: '4.11';
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5';
}

sourceSets.main.compileClasspath += configurations.provided

setTestedGradleVersion(test, gradleVersion);
task testAll {
    dependsOn test;
}

otherGradleVersions.each { String otherGradleVersion ->
    def currentTask = createTestTask(otherGradleVersion);
    testAll.dependsOn currentTask;
}

// Create the custom test task for the specific version for consistency
createTestTask(gradleVersion);

afterEvaluate {
    System.setProperty('line.separator', '\n');
}

apply from: scriptFile('maven-publish.gradle');

def createTestTask(String gradleVersion) {
    Set daemonTestPackagePatterns = ['org/netbeans/gradle/model/java/**'];

    return task(['type': Test], "testGradle${gradleVersion}", { testTask ->
        setTestedGradleVersion(testTask, gradleVersion);
        daemonTestPackagePatterns.each { pattern ->
            testTask.include pattern;
        }
    });
}

def setTestedGradleVersion(def testTask, String gradleVersion) {
    testTask.systemProperty 'TESTED_GRADLE_DAEMON_VERSION', gradleVersion;
}
