/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sg.gde.spriteeditor.io.file.sprites;

import dfEditor.SpritesheetController;
import dfEditor.command.CommandManager;
import dfEditor.dfEditorTask;
import dfEditor.events.TaskChangeListener;
import dfEditor.io.SpritesheetReader;
import java.awt.BorderLayout;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.tree.DefaultTreeModel;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileUtil;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_SpritesFile_VISUAL",
        iconBase = "sg/gde/spriteeditor/resources/images/icons/app/appIcon.png",
        mimeType = "text/sprites+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "SpritesFileVisual",
        position = 2000)
@Messages("LBL_SpritesFile_VISUAL=Editing")
public final class SpritesFileVisualElement extends JPanel implements MultiViewElement, TaskChangeListener {

    private SpritesFileDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private SpritesheetController spritesheetController;

    public SpritesFileVisualElement(Lookup lkp) {
        obj = lkp.lookup(SpritesFileDataObject.class);
        assert obj != null;

        initComponents();
    }

    @Override
    public String getName() {
        return "SpritesFileVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(btnAdd, org.openide.util.NbBundle.getMessage(SpritesFileVisualElement.class, "SpritesFileVisualElement.btnAdd.text")); // NOI18N
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnAdd);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        contentPanel.setLayout(new java.awt.BorderLayout());
        add(contentPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
        bindEditorUI(obj);
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    public void bindEditorUI(SpritesFileDataObject dobj) {
        SpritesheetReader reader = new SpritesheetReader(FileUtil.toFile(dobj.getPrimaryFile()));
        String imagePath = reader.getImagePath();
        DefaultTreeModel model = reader.getTreeModel();
        spritesheetController = new SpritesheetController(new CommandManager(null, null), false, null, this, null);

        contentPanel.add(spritesheetController, BorderLayout.CENTER);
    }

    @Override
    public void taskChanged(dfEditorTask aTask) {
    }
}
