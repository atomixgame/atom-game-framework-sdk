/*
 
 */
package com.jme3.gde.gui.extra.xam.model.visitor;

import com.jme3.gde.gui.extra.xam.model.NiftyComponent;
import com.jme3.gde.gui.extra.xam.model.ReferenceableNiftyComponent;

/**
 * Visitor for finding referenced components.
 *
 * @author cuongnguyen
 */
// Generated by XAM AutoGen Tool v0.2
public class FindReferencedVisitor<T extends ReferenceableNiftyComponent> 
        extends DefaultVisitor {
    private Class<T> type;
    private String localName;
    private T referenced = null;
    private NiftyComponent root;
    
    public FindReferencedVisitor(NiftyComponent root) {
        this.root = root;
    }

    public T find(String localName, Class<T> type) {
        this.type = type;
        this.localName = localName;
        visitChildren(root);
        return referenced;
    }
    
    /*public T find(String[] localNames, Class<T>[] types) {
        assert localNames.length == types.length;
        
        for (int index = 0; index < localNames.length; index++) {
            this.type = types[index];
            this.localName = localNames[index];
            visitChildren(root);
            
            root = referenced;
            if (index < localNames.length - 1) {
                referenced = null;
            }
        }
        return referenced;
    }*/

    private void checkReference(ReferenceableNiftyComponent c, boolean checkChildren) {
         if (type.isAssignableFrom(c.getClass()) && c.getName() != null &&
                 c.getName().equals(localName) || "*".equals(localName)) { // NOI18N
             referenced = type.cast(c);
             return;
         } else if (checkChildren) {
             visitChildren(c);
         }
    }
    
    private void visitChildren(NiftyComponent c) {
        for (NiftyComponent child : c.getChildren()) {
            if (referenced != null) { // before start each visit
                return;
            }
            child.accept(this);
        }
    }
   
}
