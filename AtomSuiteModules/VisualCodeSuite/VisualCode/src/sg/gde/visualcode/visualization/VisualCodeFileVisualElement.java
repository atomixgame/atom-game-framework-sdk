/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sg.gde.visualcode.visualization;

import java.awt.BorderLayout;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.navigator.NavigatorLookupHint;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import sg.gde.visualcode.visualization.graph.GraphSceneImpl;
import sg.gde.visualcode.io.file.VisualCodeFileDataObject;
import sg.gde.visualcode.palette.VCPaletteSupport;

@MultiViewElement.Registration(
    displayName = "#LBL_VisualCodeFile_VISUAL",
iconBase = "sg/gde/resources/images/icons/fugue-icons-pack/normal/puzzle.png",
mimeType = "text/visualcode+xml",
persistenceType = TopComponent.PERSISTENCE_NEVER,
preferredID = "VisualCodeFileVisual",
position = 2000)
@Messages("LBL_VisualCodeFile_VISUAL=Visual")
public final class VisualCodeFileVisualElement extends JPanel implements MultiViewElement {

    private VisualCodeFileDataObject fileDataObject;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private final ProxyLookup proxyLookup;
    private InstanceContent content = new InstanceContent();

    public VisualCodeFileVisualElement(Lookup lkp) {
        fileDataObject = lkp.lookup(VisualCodeFileDataObject.class);
        assert fileDataObject != null;


        initComponents();

        setLayout(new BorderLayout());

        GraphSceneImpl scene = new GraphSceneImpl();

        JScrollPane shapePane = new JScrollPane();

        shapePane.setViewportView(scene.createView());

        add(shapePane, BorderLayout.CENTER);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        //Setup lookups
        Lookup dynamicLookup = new AbstractLookup(content);
        proxyLookup = new ProxyLookup(dynamicLookup, lkp, fileDataObject.getLookup());
        setupNav();
        setupPalette();
    }

    @Override
    public String getName() {
        return "VisualCodeFileVisualElement";
    }

    public void setupPalette() {
        content.add(VCPaletteSupport.createPalette());
    }

    public void setupNav() {
        content.add(new NavigatorLookupHint() {
            public String getContentType() {
                return "text/x-visualcode+xml+nav";
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return proxyLookup;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
}
