
package sg.gde.visualcode;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
//import sg.atom.visualcode.palette.Bundle;

@ConvertAsProperties(dtd = "-//sg.atom.visualcode//Shape//EN",
autostore = false)
@TopComponent.Description(preferredID = "VCTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "sg.atom.visualcode.VCTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_VCAction",preferredID = "VCTopComponent")
@Messages({
    "CTL_VCAction=Visual code",
    "CTL_VCTopComponent=Visual code window",
    "HINT_VCTopComponent=This is a Visual code window"
})
public final class VCTopComponent extends TopComponent {

    public VCTopComponent() {
        initComponents();
//        setName(Bundle.CTL_ShapeTopComponent());
//        setToolTipText(Bundle.HINT_ShapeTopComponent());
        setName("Visual code");
        setToolTipText("Visual code");


        //FIXME: Quick start for Visual Code project...?


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    void registerIOLogComponent(){
        
    }
    
}
